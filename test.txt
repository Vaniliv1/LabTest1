import React, { useState } from "react";
import { motion } from "framer-motion";

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [task, setTask] = useState("");
  const [filter, setFilter] = useState("all");

  const addTask = () => {
    if (task.trim()) {
      setTasks([...tasks, { text: task, completed: false }]);
      setTask("");
    }
  };

  const toggleTaskCompletion = (index) => {
    const updatedTasks = tasks.map((t, i) =>
      i === index ? { ...t, completed: !t.completed } : t
    );
    setTasks(updatedTasks);
  };

  const removeTask = (index) => {
    setTasks(tasks.filter((_, i) => i !== index));
  };

  const clearCompleted = () => {
    setTasks(tasks.filter((task) => !task.completed));
  };

  const filteredTasks = tasks.filter((task) => {
    if (filter === "completed") return task.completed;
    if (filter === "pending") return !task.completed;
    return true;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex flex-col items-center p-4">
      <h1 className="text-4xl font-bold text-blue-600 mb-6">Enhanced To-Do List</h1>
      <div className="w-full max-w-lg bg-white p-6 rounded-lg shadow-xl">
        <div className="flex gap-2 mb-4">
          <input
            type="text"
            className="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-blue-300"
            placeholder="Enter a new task"
            value={task}
            onChange={(e) => setTask(e.target.value)}
          />
          <button
            onClick={addTask}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-500"
          >
            Add
          </button>
        </div>

        <div className="flex justify-between items-center mb-4">
          <span className="text-gray-600">Filter:</span>
          <div className="flex gap-2">
            <button
              onClick={() => setFilter("all")}
              className={`px-3 py-1 rounded-lg text-sm ${
                filter === "all" ? "bg-blue-600 text-white" : "bg-gray-200"
              } hover:bg-blue-500 hover:text-white`}
            >
              All
            </button>
            <button
              onClick={() => setFilter("pending")}
              className={`px-3 py-1 rounded-lg text-sm ${
                filter === "pending" ? "bg-blue-600 text-white" : "bg-gray-200"
              } hover:bg-blue-500 hover:text-white`}
            >
              Pending
            </button>
            <button
              onClick={() => setFilter("completed")}
              className={`px-3 py-1 rounded-lg text-sm ${
                filter === "completed" ? "bg-blue-600 text-white" : "bg-gray-200"
              } hover:bg-blue-500 hover:text-white`}
            >
              Completed
            </button>
          </div>
        </div>

        <ul className="space-y-2">
          {filteredTasks.map((task, index) => (
            <motion.li
              key={index}
              className={`flex justify-between items-center px-4 py-2 rounded-lg ${
                task.completed ? "bg-green-100" : "bg-gray-100"
              }`}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
            >
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={task.completed}
                  onChange={() => toggleTaskCompletion(index)}
                  className="cursor-pointer"
                />
                <span
                  className={`${
                    task.completed ? "line-through text-gray-500" : ""
                  }`}
                >
                  {task.text}
                </span>
              </div>
              <button
                onClick={() => removeTask(index)}
                className="text-red-500 hover:text-red-700"
              >
                Remove
              </button>
            </motion.li>
          ))}
        </ul>

        {tasks.length > 0 && (
          <div className="mt-6 flex justify-between items-center">
            <button
              onClick={clearCompleted}
              className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-400"
            >
              Clear Completed
            </button>
            <span className="text-gray-600 text-sm">
              {tasks.filter((task) => !task.completed).length} pending task(s)
            </span>
          </div>
        )}

        {tasks.length === 0 && (
          <p className="text-center text-gray-500 mt-4">No tasks available!</p>
        )}
      </div>
    </div>
  );
};

export default App;
